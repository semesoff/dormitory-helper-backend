// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: kitchen/kitchen_service.proto

package kitchen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KitchenService_CreateKitchenBooking_FullMethodName   = "/kitchen.KitchenService/CreateKitchenBooking"
	KitchenService_GetKitchenBookings_FullMethodName     = "/kitchen.KitchenService/GetKitchenBookings"
	KitchenService_GetUserKitchenBookings_FullMethodName = "/kitchen.KitchenService/GetUserKitchenBookings"
	KitchenService_DeleteKitchenBooking_FullMethodName   = "/kitchen.KitchenService/DeleteKitchenBooking"
)

// KitchenServiceClient is the client API for KitchenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KitchenServiceClient interface {
	CreateKitchenBooking(ctx context.Context, in *CreateKitchenBookingRequest, opts ...grpc.CallOption) (*CreateKitchenBookingResponse, error)
	GetKitchenBookings(ctx context.Context, in *GetKitchenBookingsRequest, opts ...grpc.CallOption) (*GetKitchenBookingsResponse, error)
	GetUserKitchenBookings(ctx context.Context, in *GetUserKitchenBookingsRequest, opts ...grpc.CallOption) (*GetUserKitchenBookingsResponse, error)
	DeleteKitchenBooking(ctx context.Context, in *DeleteKitchenBookingRequest, opts ...grpc.CallOption) (*DeleteKitchenBookingResponse, error)
}

type kitchenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKitchenServiceClient(cc grpc.ClientConnInterface) KitchenServiceClient {
	return &kitchenServiceClient{cc}
}

func (c *kitchenServiceClient) CreateKitchenBooking(ctx context.Context, in *CreateKitchenBookingRequest, opts ...grpc.CallOption) (*CreateKitchenBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKitchenBookingResponse)
	err := c.cc.Invoke(ctx, KitchenService_CreateKitchenBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) GetKitchenBookings(ctx context.Context, in *GetKitchenBookingsRequest, opts ...grpc.CallOption) (*GetKitchenBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKitchenBookingsResponse)
	err := c.cc.Invoke(ctx, KitchenService_GetKitchenBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) GetUserKitchenBookings(ctx context.Context, in *GetUserKitchenBookingsRequest, opts ...grpc.CallOption) (*GetUserKitchenBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserKitchenBookingsResponse)
	err := c.cc.Invoke(ctx, KitchenService_GetUserKitchenBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) DeleteKitchenBooking(ctx context.Context, in *DeleteKitchenBookingRequest, opts ...grpc.CallOption) (*DeleteKitchenBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKitchenBookingResponse)
	err := c.cc.Invoke(ctx, KitchenService_DeleteKitchenBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KitchenServiceServer is the server API for KitchenService service.
// All implementations must embed UnimplementedKitchenServiceServer
// for forward compatibility.
type KitchenServiceServer interface {
	CreateKitchenBooking(context.Context, *CreateKitchenBookingRequest) (*CreateKitchenBookingResponse, error)
	GetKitchenBookings(context.Context, *GetKitchenBookingsRequest) (*GetKitchenBookingsResponse, error)
	GetUserKitchenBookings(context.Context, *GetUserKitchenBookingsRequest) (*GetUserKitchenBookingsResponse, error)
	DeleteKitchenBooking(context.Context, *DeleteKitchenBookingRequest) (*DeleteKitchenBookingResponse, error)
	mustEmbedUnimplementedKitchenServiceServer()
}

// UnimplementedKitchenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKitchenServiceServer struct{}

func (UnimplementedKitchenServiceServer) CreateKitchenBooking(context.Context, *CreateKitchenBookingRequest) (*CreateKitchenBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKitchenBooking not implemented")
}
func (UnimplementedKitchenServiceServer) GetKitchenBookings(context.Context, *GetKitchenBookingsRequest) (*GetKitchenBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKitchenBookings not implemented")
}
func (UnimplementedKitchenServiceServer) GetUserKitchenBookings(context.Context, *GetUserKitchenBookingsRequest) (*GetUserKitchenBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserKitchenBookings not implemented")
}
func (UnimplementedKitchenServiceServer) DeleteKitchenBooking(context.Context, *DeleteKitchenBookingRequest) (*DeleteKitchenBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKitchenBooking not implemented")
}
func (UnimplementedKitchenServiceServer) mustEmbedUnimplementedKitchenServiceServer() {}
func (UnimplementedKitchenServiceServer) testEmbeddedByValue()                        {}

// UnsafeKitchenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KitchenServiceServer will
// result in compilation errors.
type UnsafeKitchenServiceServer interface {
	mustEmbedUnimplementedKitchenServiceServer()
}

func RegisterKitchenServiceServer(s grpc.ServiceRegistrar, srv KitchenServiceServer) {
	// If the following call pancis, it indicates UnimplementedKitchenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KitchenService_ServiceDesc, srv)
}

func _KitchenService_CreateKitchenBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKitchenBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).CreateKitchenBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_CreateKitchenBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).CreateKitchenBooking(ctx, req.(*CreateKitchenBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_GetKitchenBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKitchenBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).GetKitchenBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_GetKitchenBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).GetKitchenBookings(ctx, req.(*GetKitchenBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_GetUserKitchenBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserKitchenBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).GetUserKitchenBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_GetUserKitchenBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).GetUserKitchenBookings(ctx, req.(*GetUserKitchenBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_DeleteKitchenBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKitchenBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).DeleteKitchenBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_DeleteKitchenBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).DeleteKitchenBooking(ctx, req.(*DeleteKitchenBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KitchenService_ServiceDesc is the grpc.ServiceDesc for KitchenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KitchenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kitchen.KitchenService",
	HandlerType: (*KitchenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKitchenBooking",
			Handler:    _KitchenService_CreateKitchenBooking_Handler,
		},
		{
			MethodName: "GetKitchenBookings",
			Handler:    _KitchenService_GetKitchenBookings_Handler,
		},
		{
			MethodName: "GetUserKitchenBookings",
			Handler:    _KitchenService_GetUserKitchenBookings_Handler,
		},
		{
			MethodName: "DeleteKitchenBooking",
			Handler:    _KitchenService_DeleteKitchenBooking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kitchen/kitchen_service.proto",
}
